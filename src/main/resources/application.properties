#Specifiche di connessione
#jdbc.driverClassName = com.mysql.cj.jdbc.Driver
spring.datasource.url = jdbc:mysql://localhost:3306/autonoleggio?serverTimezone=UTC
spring.datasource.username = root
spring.datasource.password = root


spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQLDialect
spring.jpa.show_sql = false
#hibernate.format_sql = true
#hibernate.hbm2ddl.auto = update

#server.port = 8081

#Thymelife
spring.thymelife.cache = false
spring.thymelife.enable = true
spring.thymelife.prefix = classpath:/templates/
spring.thymelife.suffix = .html

#JWT
sicurezza.uri = /auth
sicurezza.refresh= /refresh
sicurezza.header= Authorization
sicurezza.prefix= Bearer
sicurezza.expiration= 86400
sicurezza.secret= mySecret



# Format to use when serializing Date objects.
spring.gson.date-format= 
 
# Whether to disable the escaping of HTML characters such as '<', '>', etc.
spring.gson.disable-html-escaping= 
 
# Whether to exclude inner classes during serialization.
spring.gson.disable-inner-class-serialization= 
 
# Whether to enable serialization of complex map keys (i.e. non-primitives).
spring.gson.enable-complex-map-key-serialization= 
 
# Whether to exclude all fields from consideration for serialization or deserialization that do not have the "Expose" annotation.
spring.gson.exclude-fields-without-expose-annotation= 
 
# Naming policy that should be applied to an object's field during serialization and deserialization.
spring.gson.field-naming-policy= 
 
# Whether to generate non executable JSON by prefixing the output with some special text.
spring.gson.generate-non-executable-json= 
 
# Whether to be lenient about parsing JSON that doesn't conform to RFC 4627.
spring.gson.lenient= 
 
# Serialization policy for Long and long types.
spring.gson.long-serialization-policy= 
 
# Whether to output serialized JSON that fits in a page for pretty printing.
spring.gson.pretty-printing= 
 
# Whether to serialize null fields.
spring.gson.serialize-nulls= 
